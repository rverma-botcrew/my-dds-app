/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: StringMessage.idl
  Source: StringMessage.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_STRINGMESSAGE_HPP
#define DDSCXX_STRINGMESSAGE_HPP

#include <string>

namespace example
{
class StringMessage
{
private:
 std::string content_;

public:
  StringMessage() = default;

  explicit StringMessage(
    const std::string& content) :
    content_(content) { }

  const std::string& content() const { return this->content_; }
  std::string& content() { return this->content_; }
  void content(const std::string& _val_) { this->content_ = _val_; }
  void content(std::string&& _val_) { this->content_ = _val_; }

  bool operator==(const StringMessage& _other) const
  {
    (void) _other;
    return content_ == _other.content_;
  }

  bool operator!=(const StringMessage& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::example::StringMessage>::getTypeName()
{
  return "example::StringMessage";
}

template <> constexpr allowable_encodings_t TopicTraits<::example::StringMessage>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::example::StringMessage>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::example::StringMessage>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::example::StringMessage>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::example::StringMessage>::type_map_blob_sz() { return 206; }
template<> constexpr unsigned int TopicTraits<::example::StringMessage>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::example::StringMessage>::type_map_blob() {
  static const uint8_t blob[] = {
 0x3c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x2e,  0x81,  0xb4,  0x89,  0x1f,  0xf3,  0x73, 
 0x74,  0xee,  0x7e,  0x2e,  0xf8,  0x0e,  0x75,  0x00,  0x24,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0x9a,  0x03,  0x64,  0xb9, 
 0x62,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xb8,  0xb9,  0xc2,  0x38,  0xb2,  0x2a,  0x83, 
 0xc4,  0xc1,  0xe9,  0xf9,  0xfa,  0xe4,  0x65,  0x00,  0x4a,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x65,  0x78,  0x61,  0x6d, 
 0x70,  0x6c,  0x65,  0x3a,  0x3a,  0x53,  0x74,  0x72,  0x69,  0x6e,  0x67,  0x4d,  0x65,  0x73,  0x73,  0x61, 
 0x67,  0x65,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x80,  0x08,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x6e,  0x74, 
 0x65,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0xb8,  0xb9,  0xc2,  0x38,  0xb2,  0x2a,  0x83,  0xc4,  0xc1,  0xe9,  0xf9,  0xfa,  0xe4,  0x65,  0xf1, 
 0x2e,  0x81,  0xb4,  0x89,  0x1f,  0xf3,  0x73,  0x74,  0xee,  0x7e,  0x2e,  0xf8,  0x0e,  0x75, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::example::StringMessage>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2e,  0x81,  0xb4,  0x89,  0x1f,  0xf3,  0x73,  0x74,  0xee,  0x7e,  0x2e, 
 0xf8,  0x0e,  0x75,  0x00,  0x28,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xb8,  0xb9,  0xc2,  0x38,  0xb2,  0x2a,  0x83,  0xc4,  0xc1,  0xe9,  0xf9, 
 0xfa,  0xe4,  0x65,  0x00,  0x4e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::example::StringMessage>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::example::StringMessage>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::example::StringMessage)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::example::StringMessage>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::example::StringMessage& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.content(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::example::StringMessage& instance, bool as_key) {
  auto &props = get_type_props<::example::StringMessage>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::example::StringMessage& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.content(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::example::StringMessage& instance, bool as_key) {
  auto &props = get_type_props<::example::StringMessage>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::example::StringMessage& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.content(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::example::StringMessage& instance, bool as_key) {
  auto &props = get_type_props<::example::StringMessage>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::example::StringMessage& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.content(), 128))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::example::StringMessage& instance, bool as_key) {
  auto &props = get_type_props<::example::StringMessage>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_STRINGMESSAGE_HPP
